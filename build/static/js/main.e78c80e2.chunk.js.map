{"version":3,"sources":["components/badge/badge.js","components/header/header.js","components/footer/footer.js","components/quiz/quiz.js","routes/achievement.js","routes/Rewards.js","routes/account.js","routes/explore/leaderboard.js","routes/explore/community.js","routes/explore/explore.js","routes/learn/challenge.js","routes/learn/learn.js","App.js","serviceWorker.js","index.js"],"names":["GPBadge","points","className","Classes","MINIMAL","icon","text","Header","align","Alignment","LEFT","to","IconNames","HEATMAP","RIGHT","Footer","CENTER","activeClassName","Quiz","type","description","React","useState","foodScraps","setFoodScraps","label","labelFor","min","max","stepSize","labelStepSize","onChange","value","labelRenderer","title","Achievement","Rewards","interactive","elevation","Elevation","TWO","href","Account","selectedTabId","selectTabId","id","panel","Expander","Leaderboard","Community","Explore","Challenge","name","score","total","link","isComplete","Learn","intent","animate","stripes","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e78c80e2.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Classes,\n  } from \"@blueprintjs/core\";\n  import \"./badge.css\";\n\nfunction GPBadge({ points }) {\n  return (\n    <div className=\"Badge\">\n        <Button className={`${Classes.MINIMAL} GreenPointBadge`} icon=\"tree\" text={`${points} green points`} />\n    </div>\n  );\n}\n\nexport default GPBadge;\n","import React from 'react';\nimport { IconNames } from \"@blueprintjs/icons\";\nimport {\n    Icon,\n    Alignment,\n    Navbar,\n    NavbarGroup,\n    NavbarHeading,\n} from \"@blueprintjs/core\";\nimport Badge from \"./../badge/badge\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nfunction Header() {\n    return (\n        <header className=\"Header\">\n            <Navbar>\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavbarHeading>\n                        <Link to=\"/\"><Icon icon={IconNames.HEATMAP} /> eConnect</Link>\n                    </NavbarHeading>\n                </NavbarGroup>\n                <NavbarGroup align={Alignment.RIGHT}>\n                <Badge points=\"20\" />\n                </NavbarGroup>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Navbar,\n    NavbarGroup,\n} from \"@blueprintjs/core\";\nimport {\n    Link\n} from \"react-router-dom\";\nimport \"./footer.css\";\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <Navbar>\n                <NavbarGroup align={Alignment.CENTER}>\n                    {/** FIXME: Active Styles */}\n                    <Link activeClassName=\"active\" to=\"/me\"><Button className={Classes.MINIMAL} icon=\"user\" text=\"Me\" /></Link>\n                    <Link activeClassName=\"active\" to=\"/learn\"><Button className={Classes.MINIMAL} icon=\"trending-up\" text=\"Learn\" /></Link>\n                    <Link activeClassName=\"active\" to=\"/explore\"><Button className={Classes.MINIMAL} icon=\"layout\" text=\"Explore\" /></Link>\n                </NavbarGroup>\n            </Navbar>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n// import { Radio, RadioGroup } from \"@blueprintjs/core\";\nimport { FormGroup, Slider, Button } from \"@blueprintjs/core\";\nimport \"./quiz.css\";\n\nfunction Quiz({ type, description }) {\n    // const [value, handleChange] = React.useState(\"one\");\n    const [foodScraps, setFoodScraps] = React.useState(1);\n\n    return (\n        <div className=\"Quiz\">\n            <h1>{type} Assessment</h1>\n            <p>{description}</p>\n            <FormGroup\n    label=\"1. How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup>\n<FormGroup\n    label=\"2. How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup>\n<FormGroup\n    label=\"How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup>\n<FormGroup\n    label=\"3. How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup>\n<FormGroup\n    label=\"4. How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup>\n{/* <FormGroup\n    label=\"How well do you XYZ?\"\n    labelFor=\"text-input\"\n>\n<Slider\n                    min={0}\n                    max={10}\n                    stepSize={1}\n                    labelStepSize={1}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup> */}\n            {/* <FormGroup\n    helperText=\"It always helps to record these daily in the app. \"\n    label=\"Food scraps in one week?\"\n    labelFor=\"text-input\"\n    labelInfo=\"(cups)\"\n>\n<Slider\n                    min={0}\n                    max={50}\n                    stepSize={1}\n                    labelStepSize={5}\n                    onChange={(value) => setFoodScraps(value)}\n                    labelRenderer={(value) => value}\n                    value={foodScraps}\n                />\n</FormGroup> */}\n\n{/* <RadioGroup\n                label=\"Biggest proportion of food scraps?\"\n                name=\"group\"\n                onChange={(value) => handleChange(value)}\n                selectedValue={value}\n            >\n                <Radio label=\"Fruit and veggies\" value=\"one\" />\n                <Radio label=\"Processed foods\" value=\"two\" />\n                <Radio label=\"Other\" value=\"three\" />\n            </RadioGroup> */}\n            <Button type=\"submit\" title=\"Submit assessment\">Submit assessment</Button>\n        </div>\n    );\n}\n\nexport default Quiz;\n","import React from 'react';\n\nfunction Achievement() {\n  return (\n    <div className=\"Achievement\">\n      THINGS\n    </div>\n  );\n}\n\nexport default Achievement;\n","import React from 'react';\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\nimport Badge from \"./../components/badge/badge\";\nimport \"./Rewards.css\";\n\nfunction Rewards() {\n  return (\n    <div className=\"Rewards\">\n      <Card interactive={true} elevation={Elevation.TWO}>\n        <h5><Badge points=\"20\" />\n          <a href=\"http://www.test.com\">Cruelty Free Shop</a>\n          <span className=\"right\">20% off</span>\n        </h5>\n        <p>Get a discount of 25% for XYZ</p>\n        <Button>REDEEM</Button>\n      </Card>\n    </div>\n  );\n}\n\nexport default Rewards;\n","import React from 'react';\nimport { Tab, Tabs } from \"@blueprintjs/core\";\nimport Achievement from \"./achievement\";\nimport Rewards from \"./Rewards\";\nimport Badge from \"./../components/badge/badge\";\nimport './Account.css';\n\nfunction Account() {\n  const [selectedTabId, selectTabId] = React.useState(\"Achievement\");\n\n  return (\n    <div className=\"Me\">\n      <div className=\"profile\" />\n      <div className=\"info\">\n        Jane Smith<br />\n        Testville NSW<br />\n        Level 10 - Captain Planet<br />\n        <Badge points=\"20\" />\n      </div>\n      <Tabs onChange={(id) => { selectTabId(id)}} selectedTabId={selectedTabId}>\n        <Tab id=\"Achievement\" title=\"Achievement\" panel={<Achievement />} />\n        <Tab id=\"Rewards\" title=\"Rewards\" panel={<Rewards />} />\n        <Tabs.Expander />\n      </Tabs>\n\n    </div>\n  );\n}\n\nexport default Account;\n","import React from 'react';\n\nfunction Leaderboard() {\n    return (\n        <div className=\"Community\">\n            Leaderboard TODO: Data and map\n            \n        </div>\n    );\n}\n\nexport default Leaderboard;\n","import React from 'react';\n\nfunction Community() {\n    return (\n        <div className=\"Community\">\n            COMMUNITY TODO: Data\n        </div>\n    );\n}\n\nexport default Community;\n","import React from 'react';\nimport { Tab, Tabs } from \"@blueprintjs/core\";\nimport Leaderboard from \"./leaderboard\";\nimport Community from \"./community\";\nimport './explore.css';\n\nfunction Explore() {\n  const [selectedTabId, selectTabId] = React.useState(\"Leaderboard\");\n\n  return (\n    <div className=\"Explore\">\n      <Tabs onChange={(id) => { selectTabId(id)}} selectedTabId={selectedTabId}>\n        <Tab id=\"Leaderboard\" title=\"Leaderboard\" panel={<Leaderboard />} />\n        <Tab id=\"Community\" title=\"Community\" panel={<Community />} />\n        <Tabs.Expander />\n      </Tabs>\n\n    </div>\n  );\n}\n\nexport default Explore;\n","import React from 'react';\nimport './challenge.css';\nimport { Icon } from \"@blueprintjs/core\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nfunction Challenge({ name, score, total, icon, link }) {\n  const isComplete = score === total;\n\n  return (\n    <Link to={link}>\n      <div className={isComplete ? \"Challenge\" : \"Challenge complete\"}>\n        <div className=\"name\">{name} <Icon icon={icon} /></div>\n        <div className=\"score\">{score} GREEN POINTS</div>\n        {isComplete && <div className=\"total\">COMPLETE</div>}\n        {!isComplete && <div className=\"total\">{score} / {total} GP</div>}\n      </div>\n    </Link>\n  );\n}\n\nexport default Challenge;\n","import React from 'react';\nimport { ProgressBar, Card, Elevation } from \"@blueprintjs/core\";\nimport Challenge from \"./challenge\";\nimport \"./learn.css\";\n\nfunction Learn() {\n    return (\n        <div className=\"Learn\">\n            <Card interactive={true} elevation={Elevation.TWO} className=\"Learn__dashboard\">\n                <p>NEW CHALLENGES THIS WEEK. Earn 800 more points to get to 1000 points.</p>\n                <ProgressBar intent=\"success\" value={0.2} animate={true} stripes={false} className=\"Learn__progress\" />\n                <p>You can complete the following challenges to redeem all points for this week.</p>\n            </Card>\n            <Challenge\n                name=\"Recycling 101\"\n                score=\"3\"\n                total=\"15\"\n                icon=\"tree\"\n                link=\"/recycling\"\n            />\n            <Challenge\n                name=\"Food Waste\"\n                score=\"3\"\n                total=\"15\"\n                icon=\"tree\"\n                link=\"\"\n            />\n            <Challenge\n                name=\"Compost Challenge\"\n                score=\"15\"\n                total=\"15\"\n                icon=\"heatmap\"\n            />\n            <Challenge\n                name=\"Compost Challenge\"\n                score=\"15\"\n                total=\"15\"\n                icon=\"heatmap\"\n            />\n        </div>\n    );\n}\n\nexport default Learn;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n// common components\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\nimport Quiz from './components/quiz/quiz';\n// pages\nimport Account from './routes/account';\nimport Explore from './routes/explore/explore';\nimport Learn from './routes/learn/learn';\n\nimport \"./blueprint.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <div className=\"content\">\n        <Switch>\n      \n          <Route path=\"/me\">\n            <Account />\n          </Route>\n          <Route path=\"/learn\">\n            <Learn />\n          </Route>\n          <Route path=\"/explore\">\n            <Explore />\n          </Route>\n          <Route path=\"/recycling\">\n            <Quiz \n            type=\"Recycling\"\n            description=\"Complete this quiz to earn 32 extra points\"\n             />\n          </Route>\n          <Route path=\"/\">\n            <Account />\n          </Route>\n        </Switch>\n\n      </div>\n\n      <Footer />\n\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}